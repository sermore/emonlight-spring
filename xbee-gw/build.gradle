repositories {
    maven {
        url "http://ftp1.digi.com/support/m-repo/"
    }
}

sourceSets {
    main {
        java {
            exclude '**/Kafka*.java'
        }
    }
    test {
        java {
            exclude '**/Kafka*.java'
        }
    }
}

jar {
    baseName = 'emonlight-xbee-gw'
}

springBoot {
    executable = true
}

test {
    exclude '**/RouterTest.class'
    exclude '**/EndDeviceTest.class'
    exclude '**/PulsePowerAccuracyTest.class'
    systemProperty("java.library.path", "/usr/lib/jni")
    systemProperty 'notification.serverKey', project.hasProperty('notification_serverKey') ? project.property('notification_serverKey') : 'notification-server'
    systemProperty 'notification.deviceId', project.hasProperty('notification_deviceId') ? project.property('notification_deviceId') : 'deviceId'
}

bootRun {
    systemProperty("java.library.path", "/usr/lib/jni")
    systemProperty 'spring.profiles.active', 'dev'
    systemProperty 'notification.serverKey', project.hasProperty('notification_serverKey') ? project.property('notification_serverKey') : 'notification-server'
    systemProperty 'notification.deviceId', project.hasProperty('notification_deviceId') ? project.property('notification_deviceId') : 'deviceId'
}

remotes {
    deployHost {
        host = project.hasProperty('deploy_host') ? project.property('deploy_host') : 'localhost'
        port = project.hasProperty('deploy_port') ? project.property('deploy_port') : 22
        user = project.hasProperty('deploy_user') ? project.property('deploy_user') : System.properties['user.name']        
        sudoPassword = project.hasProperty('deploy_sudo_password') ? project.property('deploy_sudo_password') : ''
        identity = project.hasProperty('identity') ? project.property('identity') : file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

task deploy(dependsOn: 'build') {
    doLast {
        ssh.run {
            session(remotes.deployHost) {
                // test if service is already installed
                if (!execute('id emonlight-xbee-gw', ignoreError: true)) {
                    put from: file('conf/install.sh'), into: '/tmp'
                    executeSudo('bash /tmp/install.sh', pty: true)
                }
                // deploy executable file
                put from: jar.archivePath.absolutePath, into: '/tmp'
                execute 'chmod a+x /tmp/' + jar.archiveName
                executeSudo 'mv -f /tmp/' + jar.archiveName + ' /var/lib/emonlight-xbee-gw/emonlight-xbee-gw.jar', pty: true
                executeSudo 'systemctl restart emonlight-xbee-gw', pty: true
            }
        }
    }
}

task undeploy {
    doLast {
        ssh.run {
            // test if service is already installed
            session(remotes.lime2) {
                put from: file('conf/uninstall.sh'), into: '/tmp'
                executeSudo("bash /tmp/uninstall.sh", pty: true)
            }
        }
    }
}

dependencies {
    compile(project(':commons')) {
        exclude group: 'org.apache.kafka'
        exclude module: 'spring-kafka'
    }
    compile("org.springframework:spring-web")
    compile("org.springframework.boot:spring-boot-starter-activemq")
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'


    compile group: 'org.rxtx', name: 'rxtx', version: '2.1.7'
    compile(group: 'com.digi.xbee', name: 'xbee-java-library', version: '1.2.0') {
        exclude(module: 'rxtx-native')
        exclude(group: 'org.slf4j')
    }

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.0.1.Final'
//    compile group: 'javax.el', name: 'javax.el-api', version:'3.0.1-b04'
//    compile group: 'org.glassfish', name: 'javax.el', version:'3.0.1-b08'

    compile group: 'org.influxdb', name: 'influxdb-java', version: '2.5+'

    testCompile("org.apache.activemq:activemq-broker")

}
